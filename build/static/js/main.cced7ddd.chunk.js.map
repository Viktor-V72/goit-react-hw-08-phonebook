{"version":3,"sources":["Components/ContactListItem/ContactListItem.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","Components/ContactForm/ContactForm.module.css","Redux/contacts/contacts-actions.jsx","Redux/contacts/contacts-reducer.jsx","Redux/store.jsx","Redux/contacts/contacts-operations.jsx","Redux/contacts/contacts-selectors.jsx","Components/ContactForm/ContactForm.jsx","Components/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filter","actions","items","createReducer","_","payload","state","action","find","contact","name","alert","id","loading","combineReducers","rootReducer","contacts","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","axios","defaults","baseURL","dispatch","get","then","data","catch","error","post","contactId","delete","getFilter","getLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","number","handleInputChange","event","currentTarget","value","setState","handleSubmit","e","preventDefault","shortid","generate","props","onSubmit","reset","this","className","styles","form","label","input","nameId","type","onChange","pattern","title","required","telId","button","Component","connect","contactsOperations","onDeleteContact","item","onClick","contactsSelectors","contact_list","map","contactsActions","target","text","App","fetchContacts","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cced7ddd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3NGMi\",\"contact\":\"ContactListItem_contact__1ZA6t\",\"button\":\"ContactListItem_button__2zgte\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__2iQi4\",\"label\":\"Filter_label__3EAM3\",\"input\":\"Filter_input__1mC7w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__-2idG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1l1e4\",\"name\":\"ContactForm_name__qC0JU\",\"button\":\"ContactForm_button__2UXQp\",\"label\":\"ContactForm_label__19AqI\",\"input\":\"ContactForm_input__2WHnf\"};","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nconst fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst filter = createAction('contacts/filter');\r\n\r\nexport default {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filter,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} = actions;\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, action) => {\r\n    if (state.find(contact => contact.name === action.payload.name)) {\r\n      alert(`${action.payload.name} is already in contacts`);\r\n      return state;\r\n    } else {\r\n      return [action.payload, ...state];\r\n    }\r\n  },\r\n  [deleteContactSuccess]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.filter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nimport contactsReducers from './contacts/contacts-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducers,\r\n});\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from 'axios';\r\nimport actions from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactError(error)));\r\n};\r\n\r\nconst addContact = data => dispatch => {\r\n  dispatch(actions.addContactRequest());\r\n  axios\r\n    .post('/contacts', data)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n\r\n// const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n","import { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations } from '../../Redux/contacts';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    };\r\n\r\n    this.props.onSubmit(contact);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.form}>\r\n        <label className={styles.label}>\r\n          <span className={styles.name}>Name</span>\r\n          <input\r\n            className={styles.input}\r\n            id={this.nameId}\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleInputChange}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.label}>\r\n          <span className={styles.name}>Number</span>\r\n          <input\r\n            className={styles.input}\r\n            id={this.telId}\r\n            value={this.state.number}\r\n            onChange={this.handleInputChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(contactsOperations.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactListItem.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../Redux/contacts/contacts-operations';\r\n\r\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\r\n  return (\r\n    <li className={styles.item}>\r\n      <p className={styles.contact}>\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        className={styles.button}\r\n        onClick={() => onDeleteContact(id)}\r\n        type=\"button\"\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\nimport contactsSelectors from '../../Redux/contacts/contacts-selectors';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <ul className={styles.contact_list}>\r\n    {contacts.map(({ name, number, id }) => (\r\n      <ContactListItem name={name} number={number} key={id} id={id} />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { contactsActions, contactsSelectors } from '../../Redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={styles.label}>\r\n    <span className={styles.text}>Find contacts by name</span>\r\n    <input\r\n      className={styles.input}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(contactsActions.filter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport contactsOperations from '../src/Redux/contacts/contacts-operations';\nimport contactsSelectors from './Redux/contacts/contacts-selectors';\nimport './styles.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n\n        <Filter />\n        {this.props.isLoadingContacts && <h3>Loading...</h3>}\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}